fastcgi_cache_path /etc/nginx/cache/nginx-cache-{{ server_name }} levels=1:2 keys_zone={{ server_name }}:10m max_size=20m inactive=20m;
#fastcgi_cache_key "$scheme$request_method$host$request_uri";
#fastcgi_cache_key "$scheme$request_method$host$request_uri$rt_session";
#fastcgi_cache_use_stale error timeout invalid_header http_500;
#fastcgi_ignore_headers Cache-Control Expires Set-Cookie;


# limit the number of connections per single IP
#limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

# limit the number of requests for a given session
#limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=7r/s;

#server {
#    listen 80 default_server;
#    server_name _;
#    return 404;
#}

upstream {{ user_domain }} {
    zone tcp_servers 64k;
    server unix:/var/run/php-fpm.{{ server_name }}.sock1 weight=100 max_fails=3 fail_timeout=3;
    server unix:/var/run/php-fpm.{{ server_name }}.sock2 weight=100 max_fails=3 fail_timeout=3;
    server unix:/var/run/php-fpm.{{ server_name }}.sock3 weight=100 max_fails=3 fail_timeout=3;
    server unix:/var/run/php-fpm.{{ server_name }}.sock4 weight=100 max_fails=3 fail_timeout=3;
}

#server{
#        listen 80;
#        server_name {{ server_name }} www.{{ server_name }};
#        return 301 https://$host$request_uri;
#}


server {
    #listen 443 ssl http2;
	
    listen 80;
    server_name {{ server_name }} www.{{ server_name }};
    
    #ssl_certificate /etc/nginx/ssl/{{ user_domain }}/fullchain.pem; # managed by Certbot
    #ssl_certificate_key /etc/nginx/ssl/{{ user_domain }}/privkey.pem; # managed by Certbot

    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    #ssl_prefer_server_ciphers on;
    #ssl_dhparam /etc/ssl/certs/dhparam.pem;
    #ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    #ssl_session_timeout 1d;
    #ssl_session_cache shared:SSL:50m;
    #ssl_stapling on;
    #ssl_stapling_verify on;
    add_header Strict-Transport-Security max-age=15768000 always;
    add_header X-Cache-Status $upstream_cache_status always;
    add_header X-Frame-Options "SAMEORIGIN";

    root /home/{{ user_domain }}/domains/{{ server_name }}/public_html;

    index index.php;

    # [ debug | info | notice | warn | error | crit | alert | emerg ]
    access_log /var/log/nginx/domains/{{ server_name }}.log main_ext;
    error_log /var/log/nginx/domains/{{ server_name }}.error.log warn;


    #deny IP country
    if ($allowed_country = no) {
       return 444;
    }

    location / {
        try_files $uri $uri/ /index.php?$args;
    }
    set $skip_cache 0;

	# POST requests and urls with a query string should always go to PHP
	if ($request_method = POST) {
		set $skip_cache 1;
	}   
	if ($query_string != "") {
		set $skip_cache 1;
	}   

	if ( $cookie_woocommerce_items_in_cart = "1" ){
		 set $skip_cache 1;
	}

	# Don't cache uris containing the following segments
	if ($request_uri ~* "/shop.*|/cart.*|/my-account.*|/checkout.*|/addons.*|/thanh-toan.*|/gio-hang.*|/wp-admin/|/xmlrpc.php|/wp-.*.php|index.php") {
		set $skip_cache 1;
	}   

	# Don't use the cache for logged in users or recent commenters
	if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
		set $skip_cache 1;
	}

    location ~ \.php$ {
		set $rt_session "";
	 	
		if ($http_cookie ~* "wp_woocommerce_session_[^=]*=([^%]+)%7C") {
               		set $rt_session wp_woocommerce_session_$1;
       		}	
	
		if ($skip_cache = 0 ) {
			more_clear_headers "Set-Cookie*";
			set $rt_session "";
		}
	
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass {{ user_domain }};
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        fastcgi_index index.php;
        include fastcgi_params;

        fastcgi_read_timeout 360s;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;
        fastcgi_cache {{ server_name }};
        fastcgi_cache_valid  60m;

        fastcgi_cache_purge on from all;

        fastcgi_cache_lock on;
        fastcgi_cache_lock_timeout 5s;
    }

    location ~ ^.+\.(jpeg|jpg|png|gif|bmp|ico|svg|css|js)$ {
        expires max;
    }

    location ~ /purge(/.*) {
        fastcgi_cache_purge {{ server_name }} "$scheme$request_method$host$1";
	allow all;
    }

    location /status {
        vhost_traffic_status_display;
        vhost_traffic_status_display_format html;
        allow all;
    }

    #location /robots.txt {
	#return 404;
    #}

    location /xmlrpc.php {
	return 404;
    }
    #include /etc/nginx/protectlayer7.conf;
}

